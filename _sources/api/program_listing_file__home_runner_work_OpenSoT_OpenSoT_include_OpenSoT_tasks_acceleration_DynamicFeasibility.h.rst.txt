
.. _program_listing_file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_tasks_acceleration_DynamicFeasibility.h:

Program Listing for File DynamicFeasibility.h
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_tasks_acceleration_DynamicFeasibility.h>` (``/home/runner/work/OpenSoT/OpenSoT/include/OpenSoT/tasks/acceleration/DynamicFeasibility.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef __OPENSOT_ACCELERATION_TASK_DYNFEAS_H__
   #define __OPENSOT_ACCELERATION_TASK_DYNFEAS_H__
   
   #include <OpenSoT/Task.h>
   #include <OpenSoT/utils/Affine.h>
   #include <xbot2_interface/xbotinterface2.h>
   
   namespace OpenSoT {
       namespace tasks {
           namespace acceleration {
           class DynamicFeasibility : public Task<Eigen::MatrixXd, Eigen::VectorXd> {
   
           public:
   
               typedef std::shared_ptr<DynamicFeasibility> Ptr;
   
               DynamicFeasibility(const std::string task_id,
                                  const XBot::ModelInterface& robot,
                                  const AffineHelper& qddot,
                                  const std::vector<AffineHelper>& wrenches,
                                  const std::vector<std::string>& contact_links);
   
   
   
               bool enableContact(const std::string& contact_link);
   
               bool disableContact(const std::string& contact_link);
   
               const std::vector<bool>& getEnabledContacts() const;
   
               Eigen::VectorXd checkTask(const Eigen::VectorXd& x);
   
           private:
                   virtual void _update();
   
                   const XBot::ModelInterface& _robot;
                   AffineHelper _qddot;
                   std::vector<AffineHelper> _wrenches;
                   std::vector<std::string> _contact_links;
                   AffineHelper _dyn_constraint;
   
                   std::vector<bool> _enabled_contacts;
   
                   Eigen::VectorXd _h, _hu;
                   Eigen::MatrixXd _B, _Bu, _Jtmp;
                   Eigen::Matrix6d _Jf;
           };
   
           }
       }
   }
   
   #endif
