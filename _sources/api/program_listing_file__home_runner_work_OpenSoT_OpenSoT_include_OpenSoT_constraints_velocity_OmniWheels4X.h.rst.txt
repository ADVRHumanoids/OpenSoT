
.. _program_listing_file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_constraints_velocity_OmniWheels4X.h:

Program Listing for File OmniWheels4X.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_constraints_velocity_OmniWheels4X.h>` (``/home/runner/work/OpenSoT/OpenSoT/include/OpenSoT/constraints/velocity/OmniWheels4X.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (C) 2023
    * Author: Enrico Mingo Hoffman
    * email:  enricomingo@gmail.com
    * Permission is granted to copy, distribute, and/or modify this program
    * under the terms of the GNU Lesser General Public License, version 2 or any
    * later version published by the Free Software Foundation.
    *
    * A copy of the license can be found at
    * https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
    *
    * This program is distributed in the hope that it will be useful, but
    * WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    * Public License for more details
   */
   
   #ifndef __BOUNDS_OMNIWHEEL4X_H__
   #define __BOUNDS_OMNIWHEEL4X_H__
   
    #include <OpenSoT/Constraint.h>
    #include <xbot2_interface/xbotinterface2.h>
   
   namespace OpenSoT {
      namespace constraints {
          namespace velocity {
          class OmniWheels4X: public Constraint<Eigen::MatrixXd, Eigen::VectorXd> {
          public:
              typedef std::shared_ptr<OmniWheels4X> Ptr;
   
              OmniWheels4X(const double l1, const double l2, const double r,
                          const std::vector<std::string> joint_wheels_name,
                          const std::string base_link,
                          XBot::ModelInterface& robot);
              virtual void update();
   
   
          private:
              XBot::ModelInterface& _robot;
              Eigen::MatrixXd _J;
              Eigen::Affine3d _w_T_b;
              const std::string _base_link;
          };
   
          }
      }
   }
   
   #endif
