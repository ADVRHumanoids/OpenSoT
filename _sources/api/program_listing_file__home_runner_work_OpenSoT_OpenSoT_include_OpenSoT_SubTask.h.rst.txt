
.. _program_listing_file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_SubTask.h:

Program Listing for File SubTask.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_SubTask.h>` (``/home/runner/work/OpenSoT/OpenSoT/include/OpenSoT/SubTask.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (C) 2014 Walkman
    * Author: Alessio Rocchi
    * email:  alessio.rocchi@iit.it
    * Permission is granted to copy, distribute, and/or modify this program
    * under the terms of the GNU Lesser General Public License, version 2 or any
    * later version published by the Free Software Foundation.
    *
    * A copy of the license can be found at
    * https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
    *
    * This program is distributed in the hope that it will be useful, but
    * WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    * Public License for more details
   */
   
   #ifndef __SUBTASK_H__
   #define __SUBTASK_H__
   
    #include <OpenSoT/Task.h>
    #include <OpenSoT/utils/Indices.h>
    #include <Eigen/Dense>
    #include <list>
    #include <vector>
    #include <string>
    #include <cassert>
    #include <memory>
    #include <iterator>
   
    namespace OpenSoT {
   
       class SubTask : public Task<Eigen::MatrixXd, Eigen::VectorXd> {
   
       public:
   
           typedef std::shared_ptr<OpenSoT::SubTask> Ptr;
   
       protected:
           TaskPtr _taskPtr;
           Indices _subTaskMap;
   
           virtual void _log(XBot::MatLogger2::Ptr logger);
   
           void generateA();
   
           void generateHessianAtype();
   
           void generateb();
   
           void generateWeight();
   
           virtual void _update();
   
           static const std::string _SUBTASK_SEPARATION_;
   
           Eigen::MatrixXd fullW;
   
       public:
           SubTask(TaskPtr taskPtr, const std::list<unsigned int> rowIndices);
   
           virtual ~SubTask(){}
   
           virtual void setWeight(const Eigen::MatrixXd& W);
   
           virtual std::list< ConstraintPtr >& getConstraints();
   
           virtual const unsigned int getTaskSize() const;
   
   
           virtual std::vector<bool> getActiveJointsMask();
   
           virtual bool setActiveJointsMask(const std::vector<bool>& active_joints_mask);
   
           static bool isSubTask(OpenSoT::Task<Eigen::MatrixXd, Eigen::VectorXd>::TaskPtr task){
               return (bool)std::dynamic_pointer_cast<OpenSoT::SubTask>(task);
           }
   
           static OpenSoT::SubTask::Ptr asSubTask(OpenSoT::Task<Eigen::MatrixXd, Eigen::VectorXd>::TaskPtr task){
               return std::dynamic_pointer_cast<OpenSoT::SubTask>(task);
           }
   
           TaskPtr getTask() {return _taskPtr;}
   
       };
   
   
    }
   
   #endif
