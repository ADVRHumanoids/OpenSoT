
.. _program_listing_file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_tasks_velocity_JointAdmittance.h:

Program Listing for File JointAdmittance.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_tasks_velocity_JointAdmittance.h>` (``/home/runner/work/OpenSoT/OpenSoT/include/OpenSoT/tasks/velocity/JointAdmittance.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef __TASKS_VELOCITY_JOINT_ADMITTANCE_H__
   #define __TASKS_VELOCITY_JOINT_ADMITTANCE_H__
   
   #include <OpenSoT/tasks/velocity/Postural.h>
   
   namespace OpenSoT {
      namespace tasks {
          namespace velocity {
          class JointAdmittance: public Postural {
           public:
              typedef std::shared_ptr<JointAdmittance> Ptr;
   
              JointAdmittance(XBot::ModelInterface &robot, XBot::ModelInterface &model, const Eigen::VectorXd& x);
   
              void setJointCompliance(const Eigen::MatrixXd& C);
   
              void setJointCompliance(const double C);
   
              const Eigen::MatrixXd& getJointCompliance();
   
              void getJointCompliance(Eigen::MatrixXd& C);
   
              void setFilterParams(const double time_step, const double damping, const double omega);
   
              void setFilterTimeStep(const double time_step);
   
              void setFilterDamping(const double damping);
   
              void setFilterOmega(const double omega);
   
              static bool isJointAdmittance(OpenSoT::Task<Eigen::MatrixXd, Eigen::VectorXd>::TaskPtr task);
   
              static OpenSoT::tasks::velocity::JointAdmittance::Ptr asJointAdmittance(OpenSoT::Task<Eigen::MatrixXd, Eigen::VectorXd>::TaskPtr task);
   
   
           private:
              XBot::ModelInterface& _robot;
              XBot::ModelInterface& _model;
   
              void _update(const Eigen::VectorXd& x);
   
              XBot::Utils::SecondOrderFilter<Eigen::VectorXd> _filter;
   
              Eigen::MatrixXd _C;
   
              Eigen::VectorXd _tau, _tau_filt, _h, _q, _tau_error;
   
          };
   
          }
      }
   }
   
   #endif
