
.. _program_listing_file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_constraints_velocity_VelocityLimits.h:

Program Listing for File VelocityLimits.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_constraints_velocity_VelocityLimits.h>` (``/home/runner/work/OpenSoT/OpenSoT/include/OpenSoT/constraints/velocity/VelocityLimits.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (C) 2014 Walkman
    * Author: Alessio Rocchi
    * email:  alessio.rocchi@iit.it
    * Permission is granted to copy, distribute, and/or modify this program
    * under the terms of the GNU Lesser General Public License, version 2 or any
    * later version published by the Free Software Foundation.
    *
    * A copy of the license can be found at
    * https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
    *
    * This program is distributed in the hope that it will be useful, but
    * WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    * Public License for more details
   */
   
   #ifndef __BOUNDS_VELOCITY_VELOCITYLIMITS_H__
   #define __BOUNDS_VELOCITY_VELOCITYLIMITS_H__
   
    #include <OpenSoT/Constraint.h>
   #include <Eigen/Dense>
   #include <xbot2_interface/xbotinterface2.h>
   
   
    namespace OpenSoT {
       namespace constraints {
           namespace velocity {
               class VelocityLimits: public Constraint<Eigen::MatrixXd, Eigen::VectorXd> {
               public:
                   typedef std::shared_ptr<VelocityLimits> Ptr;
               private:
                   double _qDotLimit;
                   double _dT;
               public:
                   VelocityLimits(const XBot::ModelInterface& robot,
                                  const double qDotLimit,
                                  const double dT);
   
                   VelocityLimits(const XBot::ModelInterface& robot,
                                  const Eigen::VectorXd& qDotLimit,
                                  const double dT);
   
                   Eigen::VectorXd getVelocityLimits();
   
                   void setVelocityLimits(const double qDotLimit);
                   void setVelocityLimits(const Eigen::VectorXd& qDotLimit);
   
                   double getDT();
   
               private:
                   void generateBounds(const double qDotLimit);
                   void generateBounds(const Eigen::VectorXd& qDotLimit);
               };
           }
       }
    }
   
   #endif
