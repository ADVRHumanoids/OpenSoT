
.. _program_listing_file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_constraints_force_NormalTorque.h:

Program Listing for File NormalTorque.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_constraints_force_NormalTorque.h>` (``/home/runner/work/OpenSoT/OpenSoT/include/OpenSoT/constraints/force/NormalTorque.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (C) 2021 EUROBENCH
    * Authors: Enrico Mingo Hoffman, Luca Rossini
    * email:  enrico.mingo@iit.it, luca.rossini@iit.it
    * Permission is granted to copy, distribute, and/or modify this program
    * under the terms of the GNU Lesser General Public License, version 2 or any
    * later version published by the Free Software Foundation.
    *
    * A copy of the license can be found at
    * https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
    *
    * This program is distributed in the hope that it will be useful, but
    * WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    * Public License for more details
   */
   
   #ifndef _CONSTRAINT_NORMAL_TORQUE_LIMITS_H_
   #define _CONSTRAINT_NORMAL_TORQUE_LIMITS_H_
   
   #include <OpenSoT/Constraint.h>
   #include <XBotInterface/ModelInterface.h>
   #include <kdl/frames.hpp>
   #include <OpenSoT/utils/Affine.h>
   #include <OpenSoT/utils/Piler.h>
   #include <OpenSoT/constraints/Aggregated.h>
   #include <OpenSoT/constraints/force/FrictionCone.h>
   
   namespace OpenSoT {
       namespace constraints {
           namespace force {
   
   class NormalTorque: public Constraint<Eigen::MatrixXd, Eigen::VectorXd> {
   public:
       typedef std::shared_ptr<NormalTorque> Ptr;
   
       NormalTorque(const std::string& contact_link,
                    const AffineHelper& wrench,
                    XBot::ModelInterface& model,
                    const Eigen::Vector2d& X_Lims,
                    const Eigen::Vector2d& Y_Lims,
                    const double& mu);
   
       void update(const Eigen::VectorXd &x);
   
       void setMu(const double mu);
   
   private:
   
       void _updateA();
   
       std::string _contact_link;
       XBot::ModelInterface& _model;
       double _mu;
       double _X, _Y;
   
       AffineHelper _constraint;
       AffineHelper _wrench;
   
       Eigen::MatrixXd _A;
   
       Eigen::Affine3d _T;
       Eigen::Affine3d _Ti;
   
       Eigen::MatrixXd _Ad;
       Eigen::MatrixXd _Ad2;
   
       Eigen::MatrixXd _AAd;
   
   };
   
   class NormalTorques: public Constraint<Eigen::MatrixXd, Eigen::VectorXd> {
   public:
       typedef std::shared_ptr<NormalTorques> Ptr;
   
       NormalTorques(const std::vector<std::string>& contact_name,
                     const std::vector<AffineHelper>& wrench,
                     XBot::ModelInterface &robot,
                     const std::vector<Eigen::Vector2d> & Xs,
                     const std::vector<Eigen::Vector2d> & Ys,
                     const std::vector<double> & mu);
   
       NormalTorque::Ptr getNormalTorque(const std::string& contact_name);
   
       void update(const Eigen::VectorXd &x);
   
   private:
       std::map<std::string, NormalTorque::Ptr> _normal_torque_map;
       OpenSoT::constraints::Aggregated::Ptr _internal_constraint;
       void generateBounds();
   };
   
          }
      }
   }
   
   #endif
