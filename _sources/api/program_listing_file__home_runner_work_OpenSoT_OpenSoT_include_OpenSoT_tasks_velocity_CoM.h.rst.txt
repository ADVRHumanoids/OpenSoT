
.. _program_listing_file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_tasks_velocity_CoM.h:

Program Listing for File CoM.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_tasks_velocity_CoM.h>` (``/home/runner/work/OpenSoT/OpenSoT/include/OpenSoT/tasks/velocity/CoM.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (C) 2014 Walkman
    * Authors:Alessio Rocchi, Enrico Mingo
    * email:  alessio.rocchi@iit.it, enrico.mingo@iit.it
    * Permission is granted to copy, distribute, and/or modify this program
    * under the terms of the GNU Lesser General Public License, version 2 or any
    * later version published by the Free Software Foundation.
    *
    * A copy of the license can be found at
    * https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
    *
    * This program is distributed in the hope that it will be useful, but
    * WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    * Public License for more details
   */
   
   #ifndef __TASKS_VELOCITY_COM_H__
   #define __TASKS_VELOCITY_COM_H__
   
   #include <OpenSoT/Task.h>
   #include <XBotInterface/ModelInterface.h>
   #include <kdl/frames.hpp>
   #include <Eigen/Dense>
   
   
    namespace OpenSoT {
       namespace tasks {
           namespace velocity {
   
           #define BASE_LINK_COM "world"
           #define DISTAL_LINK_COM "CoM"
               class CoM : public Task < Eigen::MatrixXd, Eigen::VectorXd > {
               public:
                   typedef std::shared_ptr<CoM> Ptr;
               private:
                   XBot::ModelInterface& _robot;
   
                   Eigen::Vector3d _actualPosition;
                   Eigen::Vector3d _desiredPosition;
                   Eigen::Vector3d _desiredVelocity, _desiredVelocityRef;
   
                   Eigen::Vector3d _positionError;
   
                   void update_b();
   
                   std::string _base_link;
                   std::string _distal_link;
   
               public:
   
   
   
                   CoM(const Eigen::VectorXd& x,
                       XBot::ModelInterface& robot,
                       const std::string& id = "CoM"
                      );
   
                   ~CoM();
   
                   virtual void _update(const Eigen::VectorXd& x);
   
                   virtual void setReference(const Eigen::Vector3d& desiredPosition);
                   virtual void setReference(const KDL::Vector& desiredPosition);
   
                   virtual void setReference(const Eigen::Vector3d& desiredPosition,
                                     const Eigen::Vector3d& desiredVelocity);
                   virtual void setReference(const KDL::Vector& desiredPosition,
                                     const KDL::Vector& desiredVelocity);
   
   
                   virtual const Eigen::Vector3d& getReference() const;
   
                   virtual void getReference(Eigen::Vector3d& desiredPosition,
                                     Eigen::Vector3d& desiredVelocity) const;
   
   
                   const Eigen::Vector3d& getCachedVelocityReference() const;
   
   
                   const Eigen::Vector3d& getActualPosition() const;
   
                   const std::string& getBaseLink() const;
   
                   const std::string& getDistalLink() const;
   
                   void setLambda(double lambda);
   
                   const Eigen::Vector3d& getError() const;
   
                   bool reset();
                   
                   virtual void _log(XBot::MatLogger2::Ptr logger);
   
                   static bool isCoM(OpenSoT::Task<Eigen::MatrixXd, Eigen::VectorXd>::TaskPtr task);
   
                   static OpenSoT::tasks::velocity::CoM::Ptr asCoM(OpenSoT::Task<Eigen::MatrixXd, Eigen::VectorXd>::TaskPtr task);
               };
               
   
   
           }
       }
    }
   
   #endif
