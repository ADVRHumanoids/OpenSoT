
.. _program_listing_file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_constraints_acceleration_JointLimits.h:

Program Listing for File JointLimits.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_constraints_acceleration_JointLimits.h>` (``/home/runner/work/OpenSoT/OpenSoT/include/OpenSoT/constraints/acceleration/JointLimits.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (C) 2019 Cogimon
    * Author: Matteo Parigi Polverini
    * email:  matteo.parigi@iit.it
    * Permission is granted to copy, distribute, and/or modify this program
    * under the terms of the GNU Lesser General Public License, version 2 or any
    * later version published by the Free Software Foundation.
    *
    * A copy of the license can be found at
    * https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
    *
    * This program is distributed in the hope that it will be useful, but
    * WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    * Public License for more details
   */
   
   #ifndef __BOUNDS_ACCELERATION_JOINTLIMITS_AFFINE_H__
   #define __BOUNDS_ACCELERATION_JOINTLIMITS_AFFINE_H__
   
   #include <OpenSoT/Constraint.h>
   #include <Eigen/Dense>
   #include <OpenSoT/utils/Affine.h>
   #include <OpenSoT/constraints/GenericConstraint.h>
   
    namespace OpenSoT {
       namespace constraints {
           namespace acceleration{ 
               class JointLimits: public Constraint<Eigen::MatrixXd, Eigen::VectorXd> {
               public:
                   typedef std::shared_ptr<JointLimits> Ptr;
               private:
                   
                   Eigen::VectorXd _jointLimitsMin;
                   Eigen::VectorXd _jointLimitsMax;
   
                   Eigen::VectorXd __upperBound;
                   Eigen::VectorXd __lowerBound;
                   
                   Eigen::VectorXd _a, _b_sup, _c_sup, _b_inf, _c_inf, _delta_sup, _delta_inf;
                   Eigen::VectorXd _ub_sup, _lb_sup,_ub_inf, _lb_inf, _ub, _lb;
                   
                   Eigen::VectorXd _jointAccMax;
   
                   XBot::ModelInterface& _robot;
                   
                   Eigen::VectorXd _q, _qdot;
                   
                   GenericConstraint::Ptr _generic_constraint_internal;
   
                   Eigen::VectorXd _zeros;
   
   
                   double _dt;
                   double _p;
   
               public:
                   JointLimits(XBot::ModelInterface& robot,
                               const AffineHelper& qddot,
                               const Eigen::VectorXd &jointBoundMax,
                               const Eigen::VectorXd &jointBoundMin,
                               const Eigen::VectorXd &jointAccMax,
                               const double dt);
   
   
                   void update();
   
                   void setJointAccMax(const Eigen::VectorXd& jointAccMax);
   
                   bool setPStepAheadPredictor(const double p);
   
               };
              }
           }
       
    }
   
   #endif
