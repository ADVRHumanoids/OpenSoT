
.. _program_listing_file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_tasks_acceleration_CoM.h:

Program Listing for File CoM.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_OpenSoT_OpenSoT_include_OpenSoT_tasks_acceleration_CoM.h>` (``/home/runner/work/OpenSoT/OpenSoT/include/OpenSoT/tasks/acceleration/CoM.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (C) 2017 IIT-ADVR
    * Authors: Enrico Mingo Hoffman
    * email:  enrico.mingo@iit.it
    * Permission is granted to copy, distribute, and/or modify this program
    * under the terms of the GNU Lesser General Public License, version 2 or any
    * later version published by the Free Software Foundation.
    *
    * A copy of the license can be found at
    * https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
    *
    * This program is distributed in the hope that it will be useful, but
    * WITHOUT ANY WARRANTY; without even the implied warranty of
    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    * Public License for more details
   */
   
   #ifndef __OPENSOT_ACCELERATION_TASK_COM_H__
   #define __OPENSOT_ACCELERATION_TASK_COM_H__
   
   #include <OpenSoT/Task.h>
   #include <OpenSoT/utils/Affine.h>
   #include <XBotInterface/ModelInterface.h>
   #include <XBotInterface/Utils.h>
   
   
   namespace OpenSoT { namespace tasks { namespace acceleration {
       class CoM : public OpenSoT::Task<Eigen::MatrixXd, Eigen::VectorXd> {
   
       public:
   
           typedef std::shared_ptr<CoM> Ptr;
   
           CoM(const XBot::ModelInterface& robot, const Eigen::VectorXd& x);
   
           CoM(const XBot::ModelInterface& robot, const AffineHelper& qddot);
   
           const std::string& getBaseLink() const;
   
           const std::string& getDistalLink() const;
   
           void setReference(const Eigen::Vector3d& ref);
           void setReference(const Eigen::Vector3d& pose_ref,
                             const Eigen::Vector3d& vel_ref);
           void setReference(const Eigen::Vector3d& pose_ref,
                             const Eigen::Vector3d& vel_ref,
                             const Eigen::Vector3d& acc_ref);
   
           void getReference(Eigen::Vector3d& ref);
   
           void getActualPose(Eigen::Vector3d& actual);
   
           void getPosError(Eigen::Vector3d& error);
   
           bool reset() override;
   
           virtual void _update(const Eigen::VectorXd& x);
   
           virtual void _log(XBot::MatLogger2::Ptr logger);
   
           void setLambda(double lambda1, double lambda2);
   
           virtual void setLambda(double lambda);
   
           void getLambda(double & lambda, double & lambda2);
           using Task::getLambda;
   
           const double getLambda2() const;
   
           const Eigen::Vector3d& getCachedVelocityReference() const;
   
           const Eigen::Vector3d& getCachedAccelerationReference() const;
   
           const Eigen::Matrix3d& getKp() const;
           const Eigen::Matrix3d& getKd() const;
           void setKp(const Eigen::Matrix3d& Kp);
           void setKd(const Eigen::Matrix3d& Kd);
           void setGains(const Eigen::Matrix3d& Kp, const Eigen::Matrix3d& Kd);
           void getGains(Eigen::Matrix3d& Kp, Eigen::Matrix3d& Kd);
   
       private:
   
           static const std::string world_name;
   
           std::string _base_link, _distal_link;
           const XBot::ModelInterface& _robot;
           AffineHelper _qddot;
           AffineHelper _cartesian_task;
   
           Eigen::MatrixXd _J;
           Eigen::Vector3d _jdotqdot;
   
           Eigen::Matrix3d _Kp, _Kd;
   
           Eigen::Vector3d _pose_ref, _pose_current;
           Eigen::Vector3d _pose_error, _vel_ref, _vel_current, _acc_ref, _vel_ref_cached, _acc_ref_cached;
   
           double _lambda2;
   
           void resetReference();
   
   
       };
   
   } } }
   
   
   
   
   
   
   #endif
